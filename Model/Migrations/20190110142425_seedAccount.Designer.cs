// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

namespace Model.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190110142425_seedAccount")]
    partial class seedAccount
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Models.Account", b =>
                {
                    b.Property<Guid>("IdAccount")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BillAddress");

                    b.Property<DateTime>("Closed");

                    b.Property<bool>("IsClosed");

                    b.Property<DateTime>("Open");

                    b.Property<Guid>("UserId");

                    b.HasKey("IdAccount");

                    b.HasIndex("UserId");

                    b.ToTable("Account");

                    b.HasData(
                        new { IdAccount = new Guid("1e10ba7e-469a-485d-95f4-52ec6c234e54"), BillAddress = "5 Avenue NEW-YORK, USA", Closed = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), IsClosed = true, Open = new DateTime(2019, 1, 10, 0, 0, 0, 0, DateTimeKind.Local), UserId = new Guid("f2d7b0c4-dbb5-4ce8-b4af-cf4d5157197c") }
                    );
                });

            modelBuilder.Entity("Model.Models.Article", b =>
                {
                    b.Property<Guid>("IdArticle")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activate");

                    b.Property<int>("DelievryTime");

                    b.Property<string>("Description");

                    b.Property<string>("Label");

                    b.Property<int>("PriceHT");

                    b.Property<int>("Tax");

                    b.HasKey("IdArticle");

                    b.ToTable("Articles");

                    b.HasData(
                        new { IdArticle = new Guid("78ace119-29bc-4903-a68f-fa10db32bcbf"), Activate = true, DelievryTime = 3, Description = "Poterit ut Antiochensi dispelleret Antiochensi ut obsecranti principibus victu adesset.", Label = "Creme hydradanteXXL", PriceHT = 12, Tax = 3 },
                        new { IdArticle = new Guid("78ace119-29bc-4903-a68f-fa10db32bcaa"), Activate = true, DelievryTime = 3, Description = "Poterit ut Antiochensi dispelleret Antiochensi ut obsecranti principibus victu adesset.", Label = "Creme hydradanteXXL", PriceHT = 12, Tax = 3 },
                        new { IdArticle = new Guid("78ace119-29bc-4903-a68f-fa10db32bcbb"), Activate = true, DelievryTime = 3, Description = "Poterit ut Antiochensi dispelleret Antiochensi ut obsecranti principibus victu adesset.", Label = "pomade tonic", PriceHT = 12, Tax = 3 }
                    );
                });

            modelBuilder.Entity("Model.Models.Basket", b =>
                {
                    b.Property<Guid>("BasketId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountIdAccount");

                    b.HasKey("BasketId");

                    b.HasIndex("AccountIdAccount");

                    b.ToTable("Basket");
                });

            modelBuilder.Entity("Model.Models.BasketItems", b =>
                {
                    b.Property<Guid>("IdBasketItems")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ArticleIdArticle");

                    b.Property<Guid?>("BasketId");

                    b.Property<int>("Quantity");

                    b.Property<int>("UnitePrice");

                    b.HasKey("IdBasketItems");

                    b.HasIndex("ArticleIdArticle");

                    b.HasIndex("BasketId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("Model.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Country");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Mail");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.HasData(
                        new { UserId = new Guid("f2d7b0c4-dbb5-4ce8-b4af-cf4d5157197c"), Address = "2 Avenue NEW-YORK, USA", Country = "USA", FirstName = "John", LastName = "Smith", Mail = "smith@john.com" }
                    );
                });

            modelBuilder.Entity("Model.Models.Admin", b =>
                {
                    b.HasBaseType("Model.Models.User");

                    b.Property<string>("Username");

                    b.Property<int>("login");

                    b.ToTable("Admin");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Model.Models.Customer", b =>
                {
                    b.HasBaseType("Model.Models.User");


                    b.ToTable("Customer");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("Model.Models.Account", b =>
                {
                    b.HasOne("Model.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Models.Basket", b =>
                {
                    b.HasOne("Model.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountIdAccount");
                });

            modelBuilder.Entity("Model.Models.BasketItems", b =>
                {
                    b.HasOne("Model.Models.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleIdArticle");

                    b.HasOne("Model.Models.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId");
                });
#pragma warning restore 612, 618
        }
    }
}
